When would you want to use a remote repository rather than keeping all your work local?
When I want to publish my work, either free of charge to the public or for a fee. I might also edit my work on another device, such as
a laptop or phone, then commit it and later pull all the changes back to my local depositary.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Firstly, other users might add commits to your master remote repository without you knowing. If Git automatically stays up-to-date, this will set
the programmer up for disaster. Rather, it is much safer for the 
programmer to decide when is a good time to pull changes from the remote
repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks allow me to copy repositories from other GitHubbers onto my GitHub account. I can then clone the repositories to my local one so 
i can commit changes to it. Clones can be used locally. Branches are used locally to diverge on a master path on experimental or mode 
changes to the original codes.

What is the benefit of having a copy of the last known state of the 
remote stored locally?
It will allow effective merging of the remote commit with the lastest
version of a local commit. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I suppose I would send emails back and forth with an experienced
programmer and attempt to fix my issues. It would be harder than 
using GitHub because GH specifically locates all of the areas of 
change and points it to the editor. It would take a lot of 
explaining with the email method and I don't see any advantages 
to using other methods when compared to GH.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Making changes in a separate branch is beneficial when certain 
changes can preferably be looked at and tried out before 
implementing them to the master file path. This is to minimize
disruption to service as well as bad experiences by the users of
an application, so as to ensure a smooth transition and maintain
a reputation of a relatively bug free application. Making changes 
directly in master has the obvious advantage of time-saving and 
ease of execution, as well as avoiding costly errors due to conflicts
with merging different files with multiple paths. Whether a separate branch or master is chosen will depend on the specific application 
and the programmer's goal in user experience.